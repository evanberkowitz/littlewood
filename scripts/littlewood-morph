#!/usr/bin/env python3

import littlewood
import argparse

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from tqdm import tqdm

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
                                    formatter_class=argparse.RawDescriptionHelpFormatter,
                                    description="Generate and plot movies of polynomials as the allowed coefficients change with time.",
                                    epilog="""Copyright (C) 2019  Evan Berkowitz littlewood@evanberkowitz.com

This program comes with ABSOLUTELY NO WARRANTY.
This is free software (GPLv3), and you are welcome to redistribute it under certain conditions.
"""
                                    )
    parser.add_argument("mp4",
                        type=str,
                        help="The target mp4 file.",
                        default='',
                        )
    parser.add_argument("--symmetry", type=int, default=2,
                        help="Coefficients are exp(2Ï€i time range(symmetry)).\
                              Default is 2.")
    parser.add_argument("--degree",
                        help="If 1 integer is given, just do that degree.\
                              If 2 integers are given, do every degree from the first to the last, inclusive.\
                              If 3 integers are given, do every degree in strides of the last integer.\
                              Default is 1 6.",
                        nargs="*",
                        default=[1,6],
                        type=int
                        )
    parser.add_argument("--data", help="An h5 file where we can read roots if possible and write roots to.", default=None)

    parser.add_argument("--steps", help="How many time steps to take between 0 and 1 inclusive.", default=100, type=int)

    parser.add_argument("--layer",
                        help="Animate not just one sweep through time, but multiple sweeps.  With each sweep add an additional degree according to --degree.",
                        action='store_true',
                        default=False,
                        )

    args = parser.parse_args()

    options = {
            'data': args.data,
            }

    if 1 == len(args.degree):
        options['degrees'] = np.array([args.degree[0]])
    elif 2 == len(args.degree):
        options['degrees'] = np.arange(args.degree[0], args.degree[1]+1)
    elif 3 == len(args.degree):
        options['degrees'] = np.arange(args.degree[0], args.degree[1]+1, args.degree[2])

    steps = np.linspace(0, 1, args.steps)

    defaults = {
    }

    fig, ax = littlewood.plot.one_axis_figure(**defaults)
    fig.tight_layout()

    metadata = dict(title=f'{args.symmetry}-fold Symmetry', artist='littlewood-morph by Evan Berkowitz',
                comment='https://github.com/evanberkowitz/littlewood')

    if args.mp4:
        writer = animation.FFMpegWriter(fps=32, metadata=metadata)
        file = args.mp4
    else:
        print("Pass an mp4 file.")
        exit()

    if args.layer:
        # If --layer is passed we just iterate over sublists of degrees.
        DEGREES = [options['degrees'][:n+1] for n in range(len(options['degrees']))]
    else:
        # Otherwise we iterate over just the original list.
        DEGREES = [options['degrees']]

    with writer.saving(fig, file, dpi=300):
        options['degrees'] = sorted(options['degrees'])

        for degrees in tqdm(DEGREES, desc='layers'):
            for step in tqdm(steps,  desc='time'):

                options['coefficients'] = np.exp(2j*np.pi*np.arange(args.symmetry)*step)
                roots = {d: littlewood.ensure_roots(
                                d,
                                options['coefficients'],
                                name=f'littlewood-morph/{args.symmetry}/{step}',
                                file=options['data'],
                                ) for d in degrees
                         }

                littlewood.plot.setup_axis(ax)
                littlewood.plot.points(ax, roots, animated=True, marker='.')
                writer.grab_frame()
                ax.clear()

