#!/usr/bin/env python3

import littlewood
import argparse

import numpy as np
import matplotlib.pyplot as plt

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
                                    formatter_class=argparse.RawDescriptionHelpFormatter,
                                    description="Generate and plot roots of polynomials.",
                                    epilog="""Copyright (C) 2019  Evan Berkowitz littlewood@evanberkowitz.com

This program comes with ABSOLUTELY NO WARRANTY.
This is free software (GPLv3), and you are welcome to redistribute it under certain conditions.
"""
                                    )
    parser.add_argument("--degree",
                        help="If 1 integer is given, just do that degree.\
                              If 2 integers are given, do every degree from the first to the last, inclusive.\
                              If 3 integers are given, do every degree in strides of the last integer.",
                        nargs="*",
                        default=[1,6],
                        type=int
                        )
    parser.add_argument("--coefficients",
                        help="If littlewood, the coefficients are Â±1.\
                              If roots-of-unity n, the coefficients are the nth roots of unity.\
                              If integers n, the coefficients are integers from -n to +n, inclusive \
                              If gaussian-integers n, the coefficients are the square of gaussian integers from -n-ni to n+ni inclusive.",
                        nargs="*",
                        default='littlewood'
                        )
    parser.add_argument("--data", help="An h5 file where we can read roots if possible and write roots to.", default=None)

    parser.add_argument("--show",
                        nargs=2,
                        help="The first argument can be [none,histogram,points], deciding what kind of figure to show.\
                              Default is none, don't render anything.   \
                              The second argument can be 'screen' or the name of a target file to write the image to.",
                        default=["none"]
                        )

    args = parser.parse_args()

    options = dict()

    options['data'] = args.data

    if args.coefficients == 'littlewood':
        options['name'] = 'littlewood'
        options['coefficients'] = littlewood.coefficients.littlewood()
    elif args.coefficients[0] == 'roots-of-unity':
        options['coefficients'] = littlewood.coefficients.roots_of_unity(int(args.coefficients[1]))
        options['name'] = 'roots-of-unity-{}'.format(int(args.coefficients[1]))
    elif args.coefficients[0] == 'integers':
        options['coefficients'] = littlewood.coefficients.integers(int(args.coefficients[1]))
        options['name'] = 'integers-{}'.format(int(args.coefficients[1]))
    elif args.coefficients[0] == 'gaussian-integers':
        options['coefficients'] = littlewood.coefficients.gaussian_integers(int(args.coefficients[1]))
        options['name'] = 'gaussian-integers-{}'.format(int(args.coefficients[1]))

    if 1 == len(args.degree):
        options['degrees'] = np.array([args.degree[0]])
    elif 2 == len(args.degree):
        options['degrees'] = np.arange(args.degree[0], args.degree[1]+1)
    elif 3 == len(args.degree):
        options['degrees'] = np.arange(args.degree[0], args.degree[1]+1, args.degree[2])


    roots = dict()
    for d in options['degrees']:
        print("Degree", d, "...")
        roots[d] = littlewood.ensure_roots(d, options['coefficients'], name=options['name'], file=options['data'])

    defaults = {
            'alpha':  0.1,
            #'marker': '.',
    }

    if "none" == args.show[0]:
        exit()

    fig, ax = littlewood.plot.one_axis_figure(**defaults)

    if "histogram" == args.show[0]:
        plotter = littlewood.plot.histogram
    elif "points" == args.show[0]:
        plotter = littlewood.plot.points

    plotter(ax, roots, **defaults)

    fig.tight_layout()

    if "screen" != args.show[1]:
        plt.savefig(args.show[1], bbox_inches='tight', dpi=defaults['dpi'])
    else:
        plt.show()
